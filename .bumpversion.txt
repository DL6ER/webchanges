# README for .bumpversion.cfg  (of bump2version fork)
# bump2version deletes all comments on that file so they're here.


# ### Usage examples (add -n for dry run, --verbose):
# bump2version postkind          # to go from e.g. 1.0       to 1.0.post0
# bump2version post              # to go from e.g. 1.0.post0 to 1.0.post1
# bump2version postkind & bump2version minor & bump2version prekind  # to go from e.g. 1.0.post1 to 1.1a0
# bump2version minor & bump2version prekind  # to go from e.g. 1.0 to 1.1a0
# bump2version pre               # to go from e.g. 1.1a0  to 1.1a1
# bump2version prekind           # to go from e.g. 1.1a0  to 1.1b0
# bump2version prekind           # to go from e.g. 1.1b1  to 1.1rc0
# bump2version prekind           # to go from e.g. 1.1rc0 to 1.1


# ### Goal:
# Implement PEP 440 (https://www.python.org/dev/peps/pep-0440/#developmental-releases)
#
# "The canonical public version identifiers MUST comply with the following scheme:"
# [N!]N(.N)*[{a|b|rc}N][.postN][.devN]
#
# Nomenclature for parts
# ----------------------
# We ignore [N!]N (epoch).
# We call N the 'major' part.
# We call the first (.N)* the 'minor' part.
# We call the second (.N)* (micro) the 'patch' part.
# We call [{a|b|rc}N] the 'prekind' with the N the 'pre' part .
# We call [.postN] the 'postkind' part with the N the 'post' part.
# We call [.devN] the 'devkind' part with the N the 'dev' kind.
#
# The following example [from PEP440] covers many of the possible combinations:
# -----------------------------------------------------------------------------
# 1.0.dev456
# 1.0a1
# 1.0a2.dev456
# 1.0a12.dev456
# 1.0a12
# 1.0b1.dev456
# 1.0b2
# 1.0b2.post345.dev456
# 1.0b2.post345
# 1.0rc1.dev456
# 1.0rc1
# 1.0
# 1.0+abc.5
# 1.0+abc.7
# 1.0+5
# 1.0.post456.dev34
# 1.0.post456
# 1.1.dev1


# ### Code notes:
# Don't use `first_value = 1`. It will break `release` bump
# Keep `optional = _` needed to bump to release.  See: https://github.com/peritus/bumpversion/issues/59

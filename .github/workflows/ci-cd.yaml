# GitHub Actions docs: https://docs.github.com/en/actions/learn-github-actions
# Reference syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Env. variables: https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
# Add'l variables: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

# Requires encrypted secret (see https://docs.github.com/en/actions/reference/encrypted-secrets) secrets.pypi_password

# This file is automatically "updated" with PRs by the "pre-commit ci" app in GitHub https://pre-commit.ci; it is
# currently scheduled weekly at approximately 16:00 UTC Monday.


name: Test and deploy release
on: [push, pull_request, workflow_dispatch]

env:
  FORCE_COLOR: 1
  PYTHONUTF8: 1

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  pre-commit:
    # Name the Job
    name: Quality assurance (pre-commit)
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of the repository per https://github.com/actions/checkout
      - name: Check out repo
        uses: actions/checkout@main

      # Build Python and packages per https://github.com/actions/setup-python
      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: '3.9'  # as per https://docs.readthedocs.io/en/stable/config-file/v2.html?#build-image
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            tests/requirements_pre-commit.txt
            docs/requirements.txt

      # Install dependencies needed by the repo: local in .pre-commit-config.yaml
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -U -r requirements.txt -r tests/requirements_pre-commit.txt -r docs/requirements.txt

      # The below has been replaced with the integration in GitHub of the "pre-commit ci" app https://pre-commit.ci
      # # Run pre-commit cache per https://github.com/pre-commit/action
      # - name: Run pre-commit
      #   uses: pre-commit/action@v2.0.3
      #   env:
      #     PYTHONUTF8: 1

  test_ubuntu:
    name: "Test ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    # Identifies any jobs that must complete successfully before this job will run
    needs: [pre-commit]
    # A strategy creates a build matrix for your jobs. You can define different variations to run each job in
    strategy:
      matrix:
        python-version: ['3.10', '3.9', '3.8', '3.7']
        os: [ubuntu-latest]

    # Set up Redis per https://docs.github.com/en/actions/guides/creating-redis-service-containers
    # If you are using GitHub-hosted runners, you must use an Ubuntu runner
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    env:
      commitmsg: ${{ github.event.head_commit.message }}  # only available at check-out; becomes env.commitmsg
      TELEGRAM_TOKEN: ${{ secrets.telegram_token }}  # for telegram testing
      REDIS_URI: redis://localhost:6379

    steps:
      # Checks out a copy of the repository per https://github.com/actions/checkout
      - name: Check out repo
        if: runner.os == 'Linux'
        uses: actions/checkout@main

      # Build Python and packages per https://github.com/actions/setup-python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            tests/requirements_pre-commit.txt
            tests/requirements_pytest.txt

      - name: Upgrade pip etc.
        run: |
          pip install -U pip setuptools wheel

      - name: Install build dependencies for Python 3.10 for wheel-less lxml (Linux)
        # https://lxml.de/installation.html#installation
        if: matrix.python-version == '3.10.0-beta.4' && runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install libxml2-dev libxslt-dev python-dev
          CFLAGS="-O0" pip install lxml

      - name: Install pdf2text and ocr dependencies (Linux Python 3.10)
        # do full install and testing of pdf2text and ocr only on latest Python version
        if: matrix.python-version == '3.10' && runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install python-dbus build-essential libpoppler-cpp-dev pkg-config python-dev tesseract-ocr
          pip install -U pdftotext Pillow pytesseract

      - name: Install all other dependencies
        run: |
          pip install -U coveralls -r requirements.txt -r tests/requirements_pytest.txt

      - name: Run tests
        if: runner.os != 'Windows'
        # python -m required to get it to run in the correct directory; '>' folded style scalar (allows splitting line)
        run: >
          python -m pytest -v --cov=./ --cov-report=term --cov-report=xml --cov-config=.coveragerc tests/

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        # workaround for Windows fatal exception: access violation
        # python -m required to get it to run in the correct directory; '>' folded style scalar (allows splitting line)
        run: >
          python -m pytest -v --cov=./ --cov-report=term --cov-report=xml --cov-config=.coveragerc tests/ -p 
          no:faulthandler

      - name: Upload coverage data to coveralls.io (parallel)
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          COVERALLS_FLAG_NAME: tests-${{ matrix.python-version }}-${{ matrix.os }}
          COVERALLS_PARALLEL: true

  test_others:
    # No redis (only works on ubuntu)
    name: "Test ${{ matrix.python-version }} on ${{ matrix.os }}"
    # Identifies any jobs that must complete successfully before this job will run
    needs: pre-commit
    # A strategy creates a build matrix for your jobs. You can define different variations to run each job in
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.10', '3.9', '3.8', '3.7']
    runs-on: ${{ matrix.os }}

    env:
      commitmsg: ${{ github.event.head_commit.message }}  # only available at check-out; becomes env.commitmsg
      TELEGRAM_TOKEN: ${{ secrets.telegram_token }}  # for telegram testing

    steps:
      # Checks out a copy of the repository per https://github.com/actions/checkout
      - name: Check out repo
        uses: actions/checkout@main

      # Build Python and packages per https://github.com/actions/setup-python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            tests/requirements_pre-commit.txt
            tests/requirements_pytest.txt

      - name: Upgrade pip etc.
        run: |
          pip install -U pip setuptools wheel

      - name: Install wheel-less lxml for Python 3.10 (MacOS)
        # https://lxml.de/installation.html#installation
        if: matrix.python-version == '3.10.0-beta.4' && runner.os == 'macOS'
        run: |
          STATIC_DEPS=true sudo -H pip install lxml

      - name: Install pdf2text and ocr dependencies (macOS Python 3.10)
        # do full install and testing of pdf2text and ocr only on latest Python version
        if: matrix.python-version == '3.10' && runner.os == 'macOS'
        run: |
          brew install poppler tesseract
          pip install -U pdftotext Pillow pytesseract

      - name: Install pdf2text and ocr dependencies (Windows Python 3.10)
        # do full install and testing of pdf2text and ocr only on latest Python version
        if: matrix.python-version == '3.10' && runner.os == 'Windows'
        run: |  # in PowerShell
          curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -O
          cmd Miniconda3-latest-Windows-x86_64.exe /S
          Remove-Item Miniconda3-latest-Windows-x86_64.exe -Force
          conda install -y -c conda-forge poppler
          set TESSERACT = tesseract-ocr-w64-setup-v5.0.1.20220118.exe
          curl https://digi.bib.uni-mannheim.de/tesseract/%TESSERACT% -O
          cmd %TESSERACT% /S
          Remove-Item %TESSERACT% -Force
          pip install -U keyring pdftotext Pillow pytesseract

      - name: Install all other dependencies
        run: |
          pip install -U coveralls -r requirements.txt -r tests/requirements_pytest.txt

      - name: Run tests
        if: runner.os != 'Windows'
        # python -m required to get it to run in the correct directory; '>' folded style scalar (allows splitting line)
        run: >
          python -m pytest -v --cov=./ --cov-report=term --cov-report=xml --cov-config=.coveragerc tests/

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        # workaround for Windows fatal exception: access violation
        # python -m required to get it to run in the correct directory; '>' folded style scalar (allows splitting line)
        run: >
          python -m pytest -v --cov=./ --cov-report=term --cov-report=xml --cov-config=.coveragerc tests/ -p 
          no:faulthandler

      - name: Upload coverage data to coveralls.io (parallel)
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          COVERALLS_FLAG_NAME: tests-${{ matrix.python-version }}-${{ matrix.os }}
          COVERALLS_PARALLEL: true


  coveralls:
    name: Indicate completion to coveralls.io
    needs: [test_ubuntu, test_others]
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls parallel finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true

  deploy:
    name: Deploy release
    needs: [test_ubuntu, test_others]
    # ref https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@main

      - name: Set up Python
        uses: actions/setup-python@main
        with:
          cache: 'pip'

      # Install pip dependencies executing setup.py
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -U .

      # Only building wheel; otherwise run 'python setup.py sdist bdist_wheel'
      - name: Build dist
        run: |
          python setup.py bdist_wheel

      # PyPI publish GitHub Action from https://github.com/pypa/gh-action-pypi-publish
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: RELEASE.rst
          draft: false
          prerelease: false

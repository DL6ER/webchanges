# GitHub Actions docs: https://docs.github.com/en/actions/learn-github-actions
# Reference syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Env. variables: https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
# Add'l variables: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

# Requires encrypted secret (see https://docs.github.com/en/actions/reference/encrypted-secrets) secrets.pypi_password


name: Test and deploy release
on: [push, pull_request, workflow_dispatch]

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  pre-commit:
    # Name the Job
    name: Quality assurance (pre-commit)
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of the repository per https://github.com/actions/checkout
      - name: Check out repo
        uses: actions/checkout@main

      # Build Python and packages per https://github.com/actions/setup-python
      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: 3.8  # as per https://docs.readthedocs.io/en/stable/config-file/v2.html?#build-image

      # Cache and reuse dependencies between runs
      # https://docs.github.com/en/actions/guides/building-and-testing-python#caching-dependencies
      - name: Cache
        uses: actions/cache@main
        with:
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('docs/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      # Install dependencies needed by the repo: local in .pre-commit-config.yaml
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -U -r requirements.txt -r tests/requirements_pre-commit.txt -r docs/requirements.txt

      # Run pre-commit cache per https://github.com/pre-commit/action
      - name: Run pre-commit
        uses: pre-commit/action@v2.0.3
        env:
          PYTHONUTF8: 1

  test:
    name: "Test (${{ matrix.python-version }}, ${{ matrix.os }}) (pytest)"
    # matrix.os is defined in strategy
    runs-on: ${{ matrix.os }}
    # Identifies any jobs that must complete successfully before this job will run
    needs: [pre-commit]
    # A strategy creates a build matrix for your jobs. You can define different variations to run each job in
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # for valid python-version see https://github.com/actions/python-versions/blob/main/versions-manifest.json
        python-version: [3.9, 3.8, 3.7]
#        os: [windows-latest]
#        python-version: [3.9]
        include:
        - os: ubuntu-latest
          pipcachepath: ~/.cache/pip
            # Set up Redis per https://docs.github.com/en/actions/guides/creating-redis-service-containers
            # Service containers to run with `container-job`
          services:
            # Label used to access the service container
            redis:
              # Docker Hub image
              image: redis
              # Set health checks to wait until redis has started
              options: >-
                --health-cmd "redis-cli ping"
                --health-interval 10s
                --health-timeout 5s
                --health-retries 5
              ports:
                # Maps port 6379 on service container to the host
                - 6379:6379
        - os: macos-latest
          pipcachepath: ~/Library/Caches/pip
#        - os: windows-latest  # TODO windows-latest: pytest hanging / freezing on 27-Jun-21
#                              # https://github.com/pytest-dev/pytest/discussions/6349
#          pipcachepath: ~\AppData\Local\pip\cache

    env:
      commitmsg: ${{ github.event.head_commit.message }}  # only available at check-out; becomes env.commitmsg
      TELEGRAM_TOKEN: ${{ secrets.telegram_token }}  # for telegram testing
      REDIS_URI: redis://localhost:6379

    steps:
      # Checks out a copy of the repository per https://github.com/actions/checkout
      - name: Check out repo
        uses: actions/checkout@main

      # Build Python and packages per https://github.com/actions/setup-python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}

      # Cache and reuse dependencies between runs
      # https://docs.github.com/en/actions/guides/building-and-testing-python#caching-dependencies
      - name: Cache
        uses: actions/cache@main
        with:
          path: ${{ matrix.pipcachepath }}
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Upgrade pip etc.
        run: |
          python -m pip install -U pip setuptools wheel

      - name: Install build dependencies for Python 3.10 for wheel-less lxml (Linux)
        # https://lxml.de/installation.html#installation
        if: matrix.python-version == '3.10.0-beta.4' && runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install libxml2-dev libxslt-dev python-dev
          CFLAGS="-O0" pip install lxml

      - name: Install wheel-less lxml for Python 3.10 (MacOS)
        # https://lxml.de/installation.html#installation
        if: matrix.python-version == '3.10.0-beta.4' && runner.os == 'macOS'
        run: |
          STATIC_DEPS=true sudo -H pip install lxml

      - name: Install pdf2text and ocr dependencies (Linux Python 3.9)
        # do full install and testing of pdf2text and ocr only on latest Python version
        if: matrix.python-version == '3.9' && runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install python-dbus build-essential libpoppler-cpp-dev pkg-config python-dev tesseract-ocr
          pip install -U pdftotext Pillow pytesseract

      - name: Install pdf2text and ocr dependencies (macOS Python 3.9)
        # do full install and testing of pdf2text and ocr only on latest Python version
        if: matrix.python-version == '3.9' && runner.os == 'macOS'
        run: |
          brew install pkg-config poppler python tesseract
          pip install -U pdftotext Pillow pytesseract

#      - name: Install pdf2text and ocr dependencies (Windows Python 3.9)
#        # do full install and testing of pdf2text and ocr only on latest Python version
#        if: matrix.python-version == '3.9' && runner.os == 'Windows'
#        run: |
#          curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe --output Miniconda3-latest-Windows-x86_64.exe
#          start /wait "" Miniconda3-latest-Windows-x86_64.exe /S
#          del Miniconda3-latest-Windows-x86_64.exe /y
#          conda install -y -c conda-forge poppler
#          curl https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-v5.0.0-alpha.20201127.exe --output tesseract-setup.exe
#          start /wait "" tesseract-setup.exe /S
#          del tesseract-setup /y
#          pip install -U keyring pdftotext Pillow pytesseract

      - name: Install all other dependencies
        run: |
          pip install -U -r requirements.txt -r tests/requirements_pytest.txt coveralls

      - name: Run tests (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        # python -m required to get it to run in the correct directory; '>' folded style scalar (allows splitting line)
        run: >
          python -m pytest -v --cov=./ --cov-report=term --cov-report=xml --cov-config=.coveragerc --cov-fail-under=77
          tests/
        env:
          PYTHONUTF8: 1

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        # workaround for Windows fatal exception: access violation
        # python -m required to get it to run in the correct directory; '>' folded style scalar (allows splitting line)
        run: >
          python -m pytest -v --cov=./ --cov-report=term --cov-report=xml --cov-config=.coveragerc --cov-fail-under=77
          tests/ -p no:faulthandler
        env:
          PYTHONUTF8: 1

#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          flags: ${{ matrix.python-version }},${{ matrix.os }}
#          name: ${{ env.commitmsg }}
#          fail_ci_if_error: true
##          verbose: true # optional (default = false)

      - name: Upload coverage data to coveralls.io (parallel)
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          COVERALLS_FLAG_NAME: tests-${{ matrix.python-version }}-${{ matrix.os }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Indicate completion to coveralls.io
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls parallel finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true

  deploy:
    name: Deploy release
    runs-on: ubuntu-latest
    # ref https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [test]
    steps:
      - name: Check out repo
        uses: actions/checkout@main

      - name: Set up Python
        uses: actions/setup-python@main

      # Install pip dependencies executing setup.py
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -U .

      # Only building wheel; otherwise run 'python setup.py sdist bdist_wheel'
      - name: Build dist
        run: |
          python setup.py bdist_wheel

      # PyPI publish GitHub Action from https://github.com/pypa/gh-action-pypi-publish
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: RELEASE.rst
          draft: false
          prerelease: false
